// Generated by CoffeeScript 1.10.0
(function() {
  var progressDisplay, updateFirstTwoProgressBars, updateThrottledProgressBar;

  updateFirstTwoProgressBars = function() {
    var total;
    total = 20;
    return co(function*() {
      var i, j, perc1, perc2, percent, prog1, prog2, ref, results;
      perc1 = $('.html5 .percent');
      prog1 = $('progress');
      perc2 = $('.bs .percent');
      prog2 = $('.bs .progress-bar');
      results = [];
      for (i = j = 1, ref = total; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        percent = i / total * 100;
        perc1.text((percent.toFixed(0)) + "%");
        prog1.val(percent);
        perc2.text((percent.toFixed(0)) + "%");
        prog2.css('width', percent + "%");
        results.push((yield sleep(1)));
      }
      return results;
    });
  };

  updateThrottledProgressBar = function() {
    var pd, rtValue, total;
    total = 1000;
    pd = progressDisplay('.throttle', total);
    rtValue = $('.realtime-value');
    return co(function*() {
      var i, j, ref, results;
      results = [];
      for (i = j = 1, ref = total; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        rtValue.text(i);
        pd.setValue(i);
        results.push((yield sleep(0.05)));
      }
      return results;
    });
  };

  progressDisplay = function(container, max) {
    var barDiv, newValue, percDiv, progDiv, running, setValue;
    newValue = null;
    running = false;
    percDiv = $(container).find('.percent');
    barDiv = $(container).find('.progress-bar');
    progDiv = $(container).find('.progress');
    setValue = function(val) {
      newValue = val / max * 100;
      if (!running) {
        return co(function*() {
          running = true;
          progDiv.addClass('active');
          while (newValue !== null) {
            percDiv.text((newValue.toFixed(0)) + "%");
            barDiv.css('width', newValue + "%");
            newValue = null;
            (yield sleep(1));
          }
          progDiv.removeClass('active');
          return running = false;
        });
      }
    };
    return {
      setValue: setValue
    };
  };

  updateFirstTwoProgressBars();

  updateThrottledProgressBar();

}).call(this);
